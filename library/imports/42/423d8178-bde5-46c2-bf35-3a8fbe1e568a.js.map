{"version":3,"sources":["assets/scripts/Game.js"],"names":["cc","Class","Component","properties","starPrefab","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","beginPrefab","scoreDisplay","Label","scoreAudio","AudioClip","isBegin","starProgress","ProgressBar","instructionLabel","onLoad","node","active","groundY","y","height","timer","starDuration","onStartGame","score","newBegin","instantiate","addChild","setPosition","on","EventType","TOUCH_START","t","destroy","spawnNewStar","newStar","getNewStarPosition","getComponent","game","Math","random","randX","randY","jumpHeight","maxX","width","v2","gainScore","string","gameOver","stopAllActions","director","loadScene","start","update","dt","progress"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n\n        // Player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: cc.Node\n        },\n        beginPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        // 得分音效资源\n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        },\n        isBegin: false,\n        starProgress: { // 设置星星消失的进度条\n            default: null,\n            type: cc.ProgressBar\n        },\n        instructionLabel: {\n            default: null,\n            type: cc.Label\n        }\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n    onLoad: function() {\n        // 获取地平面的 y 轴坐标\n        this.starProgress.node.active = false\n        this.groundY = this.ground.y + this.ground.height / 2;\n        // 初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n        // 生成一个新的星星\n        this.onStartGame()\n        this.score = 0;\n    },\n\n    onStartGame: function() {\n        var newBegin = cc.instantiate(this.beginPrefab);\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newBegin);\n        // 为星星设置一个随机位置\n        newBegin.setPosition(0, 0)\n        newBegin.on(cc.Node.EventType.TOUCH_START, function(t) {\n            this.isBegin = true\n            this.instructionLabel.destroy()\n            this.spawnNewStar()\n            newBegin.destroy();\n        }, this)\n    },\n\n    spawnNewStar: function() {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition()); // 在星星脚本组件上保存 Game 对象的引用\n        newStar.getComponent('Star').game = this;\n        // 重置计时器，根据消失时间范围随机取一个值\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n        this.starProgress.node.active = true\n\n    },\n\n    getNewStarPosition: function() {\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width / 2;\n        randX = (Math.random() - 0.5) * 2 * maxX;\n        // 返回星星坐标\n        return cc.v2(randX, randY);\n    },\n    gainScore: function() {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score;\n    },\n    gameOver: function() {\n        // 停止 Player 节点的跳跃动作\n        this.player.stopAllActions();\n\n        // 重新加载场景 game\n        cc.director.loadScene('game');\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start() {\n\n    },\n\n    update: function(dt) {\n        // 每帧更新计时器，超过限度还没有生成新的星星\n        // 就会调用游戏失败逻辑\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            this.isBegin = false\n            return;\n        }\n\n        this.timer += dt;\n        if (this.isBegin) {\n            this.starProgress.progress = this.starDuration && (this.timer / this.starDuration)\n        }\n    },\n});"]}